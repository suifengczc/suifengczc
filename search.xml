<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo踩坑记录</title>
      <link href="/2019/09/22/hexo/hexo_help/"/>
      <url>/2019/09/22/hexo/hexo_help/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo踩坑记录"><a href="#hexo踩坑记录" class="headerlink" title="hexo踩坑记录"></a>hexo踩坑记录</h1><h2 id="本地预览图片丢失"><a href="#本地预览图片丢失" class="headerlink" title="本地预览图片丢失"></a>本地预览图片丢失</h2><p>当新建了博客编写完后执行<code>hexo g</code>和<code>hexo s</code>预览文章发现所有的图片都丢失了，无法正常加载。chrome中按<code>F12</code>查看发现<code>hexo-asset-image</code>插件没有正确地转换图片地址</p><p><img src="/2019/09/22/hexo/hexo_help/error_src.png" alt="错误图片地址"></p><p>而且生成的资源下也不包含任何图片信息。</p><p><img src="/2019/09/22/hexo/hexo_help/no_src.png" alt="无图片资源"></p><p>一开始在这个<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">博客</a>下找到了解决方案。</p><p>找到博客根目录下的<code>/node_modules/hexo-asset-image/index.js</code>文件，将其中的代码修改正博客中的代码，贴上代码如下：</p><pre><code class="js">&#39;use strict&#39;;var cheerio = require(&#39;cheerio&#39;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string--123456794563543543543545435function getPosition(str, m, i) {  return str.split(m, i).join(m).length;}var version = String(hexo.version).split(&#39;.&#39;);hexo.extend.filter.register(&#39;after_post_render&#39;, function(data){  var config = hexo.config;  if(config.post_asset_folder){        var link = data.permalink;    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)       var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;    else       var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.    var endPos = link.lastIndexOf(&#39;/&#39;) + 1;    link = link.substring(beginPos, endPos);    var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];    for(var i = 0; i &lt; toprocess.length; i++){      var key = toprocess[i];      var $ = cheerio.load(data[key], {        ignoreWhitespace: false,        xmlMode: false,        lowerCaseTags: false,        decodeEntities: false      });      $(&#39;img&#39;).each(function(){        if ($(this).attr(&#39;src&#39;)){            // For windows style path, we replace &#39;\&#39; to &#39;/&#39;.            var src = $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;/&#39;);            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;               !/^\s*\//.test(src)) {              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.              // In addition, to support multi-level local directory.              var linkArray = link.split(&#39;/&#39;).filter(function(elem){                return elem != &#39;&#39;;              });              var srcArray = src.split(&#39;/&#39;).filter(function(elem){                return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;              });              if(srcArray.length &gt; 1)                srcArray.shift();              src = srcArray.join(&#39;/&#39;);              $(this).attr(&#39;src&#39;, config.root + link + src);              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);            }        }else{            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);            console.info&amp;&amp;console.info($(this));        }      });      data[key] = $.html();    }  }});</code></pre><p>但是这个解决方案其实是有问题</p><p><img src="/2019/09/22/hexo/hexo_help/error_src_1.png" alt="方案1"></p><p>可以看到这里的<code>src</code>资源路径还是错误的。原因是这里的方案只支持Hexo的标签方式(Hexo的标签引用<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">看这里</a>)的引用，对于markdown的引用方式还是不支持。如果把这里的图片引入方式修改为Hexo的标签方式<code></code>就可以正常显示了。</p><p>但是这有一个问题就是使用标签方式在markdown中无法直接预览效果。</p><p>所以我就基于这个解决方案做了修改。代码如下：</p><pre><code class="javascript">&#39;use strict&#39;;var cheerio = require(&#39;cheerio&#39;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) {    return str.split(m, i).join(m).length;}var version = String(hexo.version).split(&#39;.&#39;);hexo.extend.filter.register(&#39;after_post_render&#39;, function (data) {    var config = hexo.config;    if (config.post_asset_folder) {        var link = data.permalink;        if (version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)            var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;        else            var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;        // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.        var endPos = link.lastIndexOf(&#39;/&#39;) + 1;        link = link.substring(beginPos, endPos);        var beginDir = getPosition(link, &quot;/&quot;, 2)        var endDir = link.length        var srcDir = link.substring(beginDir, endDir)        var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];        for (var i = 0; i &lt; toprocess.length; i++) {            var key = toprocess[i];            var $ = cheerio.load(data[key], {                ignoreWhitespace: false,                xmlMode: false,                lowerCaseTags: false,                decodeEntities: false            });            $(&#39;img&#39;).each(function () {                if ($(this).attr(&#39;src&#39;)) {                    // For windows style path, we replace &#39;\&#39; to &#39;/&#39;.                    var src = $(this).attr(&#39;src&#39;)                    src = src.replace(&#39;\\&#39;, &#39;/&#39;);                    var b1 = !/http[s]*.*|\/\/.*/.test(src)                    if (b1) {                        // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.                        // In addition, to support multi-level local directory.                        var linkArray = link.split(&#39;/&#39;).filter(function (elem) {                            return elem != &#39;&#39;;                        });                        var srcArray = src.split(&#39;/&#39;).filter(function (elem) {                            return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;                        });                        if (srcArray.length &gt; 1)                            srcArray.shift();                        var mSrc = srcArray.join(&#39;/&#39;);                        var realLink = srcDir + mSrc                        $(this).attr(&#39;src&#39;, realLink);                        console.info &amp;&amp; console.info(&quot;update link as:--&gt;&quot; + realLink);                    }                } else {                    console.info &amp;&amp; console.info(&quot;no src attr, skipped...&quot;);                    console.info &amp;&amp; console.info($(this));                }            });            data[key] = $.html();        }    }});    </code></pre><p>这样就可以支持markdown的图片引入了</p><p>效果如下：</p><p><img src="/2019/09/22/hexo/hexo_help/good_src.png" alt="正常显示"></p><h2 id="代码行号丢失"><a href="#代码行号丢失" class="headerlink" title="代码行号丢失"></a>代码行号丢失</h2><p>按照官网文档的推荐使用<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a>作为代码高亮插件，但是按照官网的配置发现预览网页中没有行号。</p><p>需要做如下修改，打开主题的<code>themes\hexo-theme-matery\source\css\matery.css</code>文件，修改第95~111行如下</p><pre><code class="css">pre {    padding: 1.5rem 1.5rem 1.5rem 3.3rem !important;    margin: 1rem 0 !important;    background: #272822;    overflow: auto;    border-radius: 0.35rem;    tab-size: 4;}code {    padding: 1px 5px;    font-family: Inconsolata, Monaco, Consolas, &#39;Courier New&#39;, Courier, monospace;    /* font-size: 0.91rem;*/    color: #e96900;    background-color: #f8f8f8;    border-radius: 2px;}</code></pre><p>重新生成预览页面就正常了</p><h2 id="代码行号错位"><a href="#代码行号错位" class="headerlink" title="代码行号错位"></a>代码行号错位</h2><p>当代码中存在较长代码自动换行时会导致代码行号与代码不对应。</p><p>使用<code>code-prettify</code>代替</p><h2 id="更换代码高亮插件"><a href="#更换代码高亮插件" class="headerlink" title="更换代码高亮插件"></a>更换代码高亮插件</h2><p>因为<code>hexo-prism-plugin</code>在行号显示和复制代码丢失缩进和换行的问题，所以决定更换代码高亮插件为<a href="https://github.com/google/code-prettify" target="_blank" rel="noopener">code-prettify</a>。</p><p>从<a href="https://github.com/google/code-prettify" target="_blank" rel="noopener">code-prettify</a>clone下来最新代码，复制<code>code-prettify\src\prettify.js</code>文件到博客主题的<code>source\js</code>下</p><p><img src="/2019/09/22/hexo/hexo_help/copy_prettifyjs.png" alt="复制prettify.js"></p><p>然后复制<code>code-prettify\styles\sons-of-obsidian.css</code>文件到博客的<code>source\css</code>下（这里是使用了<code>sons-of-obsidian</code>代码高亮主题，如果要使用默认主题的话就复制<code>code-prettify\src\prettify.css</code>到这个目录下）。</p><p>然后打开<code>themes\hexo-theme-matery\layout\_partial\head.ejs</code>文件，增加引用新css的代码</p><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%- config.root %&gt;css/sons-of-obsidian.css&quot; media=&quot;screen&quot; type=&quot;text/css&quot;&gt;</code></pre><p> 如果用的是默认的css，这里就设置为对应的css就好了。</p><p>另外很重要的一点是这里还需要添加一段style代码：</p><pre><code class="html">&lt;style&gt;     li.L0, li.L1, li.L2, li.L3, li.L4, li.L5, li.L6, li.L7, li.L8, li.L9    { list-style-type: decimal !important }&lt;/style&gt;</code></pre><p>这其实是为了解决<code>code-prettify</code>的行号bug，不然会出现在代码块中只有一个点但没有代码行号的情况。</p><p>接着打开<code>themes\hexo-theme-matery\layout\_partial\footer.ejs</code>文件，增加加载<code>prettify.js</code>的代码：</p><pre><code class="html">&lt;script src=&quot;&lt;%- config.root %&gt;js/prettify.js&quot;&gt;&lt;/script&gt;</code></pre><p>再给<code>pre</code>标签增加<code>prettyprint</code>和<code>linenums</code>这两个css的class</p><pre><code class="html">&lt;script type=&quot;text/javascript&quot;&gt;    $(document).ready(function(){        $(&#39;pre&#39;).addClass(&#39;prettyprint linenums&#39;);            prettyPrint();    })&lt;/script&gt;</code></pre><p>最后要记得把博客根目录下的<code>_config.yml</code>中highlight相关的配置都修改为false</p><p>做完这些后就可以执行<code>hexo g</code>和<code>hexo s</code>预览一下效果了，代码块应该是能正常工作了</p><p>参考自：</p><ol><li><p>[<a href="http://masikkk.com/article/hexo-12-google-code-prettify/" target="_blank" rel="noopener">Hexo博客(12)使用google-code-prettify代码高亮</a>]</p></li><li><p><a href="https://www.v2ex.com/t/32260" target="_blank" rel="noopener">https://www.v2ex.com/t/32260</a></p></li></ol><p>下面是我自己对主题的一些修改:</p><ul><li><p>去除代码的隔行不同背景色，把<code>sons-of-obsidian.css</code>里的69~71行代码注释掉。</p><pre><code class="css">li.L1, li.L3, li.L5, li.L7, li.L9 {    background: #111;}</code></pre></li><li><p>去除每行代码的背景色，通过查看style发现是在<code>mateay.css</code>里的<code>pre code</code>里的<code>background-color</code>控制的，所以这里把<code>background-color</code>的alpha值设为0就好了</p><p><img src="/2019/09/22/hexo/hexo_help/code_bg.png" alt="代码背景色"></p><p><img src="/2019/09/22/hexo/hexo_help/code_bg_1.png" alt="代码取消背景色"></p></li><li><p>修复代码块复制后丢失缩进的问题</p><p><code>matery</code>还有这样一个bug，当复制的代码数量大于主题的<code>_config.yml</code>下的<code>copyright</code>中配置的<code>minCharNumber</code>阈值时会导致粘贴时代码丢失缩进，排查后解决方案如下：在<code>themes\hexo-theme-matery\layout\_partial\post-detail.ejs</code>代码中为<code>newdiv</code>增加<code>newdiv.style.whiteSpace = &#39;pre&#39;</code>属性。</p><pre><code class="javascript">// create a div outside of the visible area and fill it with the selected text.var bodyElement = document.getElementsByTagName(&#39;body&#39;)[0];var newdiv = document.createElement(&#39;div&#39;);newdiv.style.position = &#39;absolute&#39;;newdiv.style.left = &#39;-99999px&#39;;newdiv.style.whiteSpace = &#39;pre&#39;; //增加这个属性，以防止空格缩进被去除bodyElement.appendChild(newdiv);var cloneContents = selection.getRangeAt(0).cloneContents()newdiv.appendChild(cloneContents);</code></pre></li></ul><h2 id="线上博客异常"><a href="#线上博客异常" class="headerlink" title="线上博客异常"></a>线上博客异常</h2><p>本地博客push到线上后发现界面排版错误，所有图片无法加载，其实是因为GitHub上的仓库名称命名错误。</p><p>仓库名称应该命名为[GitHub name].github.io</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> help </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始hexo之旅</title>
      <link href="/2019/09/20/hexo/start_hexo/"/>
      <url>/2019/09/20/hexo/start_hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h1><p>这篇博客主要记录hexo使用中的命令</p><ul><li><p>生成静态页面</p><p>  <code>hexo g</code> 或 <code>hexo generate</code></p></li><li><p>启动本地服务，预览效果</p><p>  <code>hexo s</code> 或 <code>hexo server</code></p></li><li><p>上传博客到GitHub并部署</p><p>  <code>hexo d</code> 或 <code>hexo deploy</code></p></li><li><p>清空本地缓存文件和已生成的静态页面<br>  <code>hexo clean</code></p></li><li><p>显示hexo版本<br>  <code>hexo version</code></p></li><li><p>新建默认文章<br>  <code>hexo new [layout] &lt;title&gt;</code><br>  这里的<code>layout</code>可以省略，使用默认的配置，<code>title</code>不可省略，<code>title</code>可以是中英文，如果title中包含空格，则需要用双引号包裹。<br>  这里执行后会默认在<code>source\_posts</code>目录下生成<code>&lt;title&gt;.md</code>命名的文件。</p></li><li><p>新建指定目录文章<br>  <code>hexo new page --path &lt;path&gt; &lt;title&gt;</code><br>  这里会在指定的目录下生成博客文件。<br>  <img src="/2019/09/20/hexo/start_hexo/new_page.png" alt="new page 新建博客"><br>  这条命令创建了一个标题为<code>开始hexo之旅</code>的博客，指定目录在<code>_posts/hexo/start_hexe</code>下。<br>  <img src="/2019/09/20/hexo/start_hexo/start_hexo.png" alt="新建的博客目录结构"><br>  如图可以看到这里生成了一个<code>start_hexo</code>文件夹和<code>start_hexo.md</code>文件。</p></li><li><p>文章添加多标签</p><p>为文章添加多标签可以在md文件头添加</p><pre><code>tags: - tag1- tag2- tag3</code></pre><p>或者</p><pre><code>tags: [tag1, tag2, tag3]</code></pre><p>这两种方式都能达到相同效果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改hexo博客的主题</title>
      <link href="/2019/09/20/hexo/hexo_theme/"/>
      <url>/2019/09/20/hexo/hexo_theme/</url>
      
        <content type="html"><![CDATA[<h1 id="修改hexo博客的主题"><a href="#修改hexo博客的主题" class="headerlink" title="修改hexo博客的主题"></a>修改hexo博客的主题</h1><p>hexo支持自定义主题，官网的主题商店在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>，想要更换默认主题可以在这里挑选喜欢的主题，我这里使用了<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>，这个主题的中文文档非常详细，<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">戳这里</a>。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><ul><li>已搭建成功的Hexo环境<br>搭建教程查看上篇<a href="https://suifengczc.github.io/2019/09/07/hexo/build_hexo/">Github+Hexo搭建博客</a></li></ul><h2 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2. 下载主题"></a>2. 下载主题</h2><p>下载主题可以直接从主题的GitHub仓库中直接克隆到博客目录的<code>themes</code>目录下。或者下载主题的zip包解压后复制到博客的<code>themes</code>目录下。<br><img src="/2019/09/20/hexo/hexo_theme/clone_theme.png" alt="复制主题文件到themes文件夹下"><br>克隆或者复制到<code>themes</code>目录下的主题文件夹是可以重命名的，不一定按照原来的名字。</p><h2 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h2><p>新主题复制到<code>themes</code>目录下后打开博客目录下的<code>_config.yml</code>配置文件，在末尾的<code>theme</code>配置处修改为新主题的名称。<br><img src="/2019/09/20/hexo/hexo_theme/config_theme.png" alt="配置新主题"></p><p>这时候直接执行</p><pre><code>hexo ghexo s</code></pre><p>是会报错的，因为<code>Matery</code>主题还需要先配置一些参数，具体的配置可以参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">Matery文档</a>，因为官方文档非常详细这里就不再赘述了。<br>另外可以参考<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-14" target="_blank" rel="noopener">这个博客</a>，里面包含了许多个性化设置。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建博客</title>
      <link href="/2019/09/07/hexo/build_hexo/"/>
      <url>/2019/09/07/hexo/build_hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-Hexo搭建博客"><a href="#Github-Hexo搭建博客" class="headerlink" title="Github+Hexo搭建博客"></a>Github+Hexo搭建博客</h1><p>本文介绍了如何使用hexo在GitHub上搭建个人博客</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><ul><li>git</li><li>Node.js</li><li>Github账号</li><li>Hexo</li></ul><h3 id="1-1Git安装"><a href="#1-1Git安装" class="headerlink" title="1.1Git安装"></a>1.1Git安装</h3><p>从<a href="https://git-scm.com/" target="_blank" rel="noopener">git for windows</a>下载git安装.<br>安装完成后在控制台输入<code>git --version</code>验证是否安装成功</p><h3 id="1-2Node-js"><a href="#1-2Node-js" class="headerlink" title="1.2Node.js"></a>1.2Node.js</h3><p>从<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js</a>下载对应的版本安装即可。<br>安装完成后在控制台输入<code>node -v</code>来验证是否安装成功，并且环境设置正确。</p><h3 id="1-3Github账号"><a href="#1-3Github账号" class="headerlink" title="1.3Github账号"></a>1.3Github账号</h3><p>Github账号自行注册</p><h3 id="1-4安装Hexo"><a href="#1-4安装Hexo" class="headerlink" title="1.4安装Hexo"></a>1.4安装Hexo</h3><p>Node.js安装成功后在控制台执行<code>npm install -g hexo-cli</code>，npm会自动帮我们完成hexo的安装。<br>安装结束后可以输入<code>hexo version</code>验证是否安装成功<br><img src="/2019/09/07/hexo/build_hexo/hexo_version.png" alt="hexo version"></p><h2 id="2-创建本地博客目录"><a href="#2-创建本地博客目录" class="headerlink" title="2.创建本地博客目录"></a>2.创建本地博客目录</h2><p>首先在本地目录创建一个自己的博客文件夹，例如我这里的本地目录是<code>D:\My_Blogs</code>，接下来开始初始化hexo目录。</p><p>然后打开控制台cd到博客目录下，执行<code>hexo init</code>命令（或者执行<code>hexo init &lt;folder&gt;</code>指定生成博客的目录，没有指定folder时，hexo会在当前目录下初始化），hexo会自动帮我们生成博客。因为我这里已经创建了<code>D:\My_Blogs</code>目录，所有后续的操作都在<code>D:\test</code>下执行。执行完init命令后会在博客文件夹下生成如下的文件。</p><p><code>scaffolds</code>文件夹是hexo的模板文件夹。<br><code>source</code>文件夹顾名思义是存放博客资源的地方，当我们使用hexo命令创建博客时会在这个目录下生成相应的md文件和同名文件夹用来存放资源。<br><code>themes</code>是hexo的主题文件夹，hexo支持多种自定义博客主题，需要切换主题时可以从GitHub上clone主题资源到这个目录下。</p><p><img src="/2019/09/07/hexo/build_hexo/hexo_init.png" alt="hexo init"></p><p>到这里其实本地博客已经搭建完成了，接下来执行<code>hexo g</code>命令(<code>hexo generate</code>的简写形式，两者作用相同)，会生成本地的静态页面。<br><img src="/2019/09/07/hexo/build_hexo/hexo_g.png" alt="hexo g"></p><p>可以看到hexo生成了28个文件，用时827ms。不知道为什么这里的<code>Generated:</code>打印都没有具体文件名<br>这里去看本地的博客目录会发现hexo创建了一个public文件夹，下面是hexo生成的博客静态文件</p><p>再执行<code>hexo s</code>命令（<code>hexo server</code>的简写形式）会启动hexo服务。<br><img src="/2019/09/07/hexo/build_hexo/hexo_s.png" alt="hexo s"><br>如图，表示服务启动成功了。<br>这时候可以在浏览器访问<code>http://localhost:4000</code>查看博客了，默认情况下本地访问都是这个地址。<br>如图，本地的hexo博客已经搭建完成。<br><img src="/2019/09/07/hexo/build_hexo/hexo_hello.png" alt="hexo hello"></p><h2 id="3-Github创建博客仓库"><a href="#3-Github创建博客仓库" class="headerlink" title="3.Github创建博客仓库"></a>3.Github创建博客仓库</h2><p>打开GitHub主页，点击+号下的<code>New repository</code>创建一个新的仓库<br><img src="/2019/09/07/hexo/build_hexo/github_newrep.png" alt="新建仓库"> </p><p>然后在仓库界面填写相关仓库信息<br><img src="/2019/09/07/hexo/build_hexo/new_rep_name.png" alt="填写仓库名称"><br><img src="/2019/09/07/hexo/build_hexo/warn.png" width="20" height="20">踩坑提醒：这里一定要保证填写的repository name是你的GitHub名称+github.io的格式，不要写错。<br>（这里因为我已经创建了suifengczc.github.io的仓库所以提示仓库已存在）<br>否则写错了仓库名称会导致后面访问正式线上博客时出现找不到资源或者布局出错的问题。<br>填写完仓库名称和描述（可选）后直接<code>Create repository</code>就行了。</p><p>GitHub仓库创建完成后复制仓库的地址，如下<br><img src="/2019/09/07/hexo/build_hexo/clone_url.png" alt="clone url"><br>粘贴到博客目录下的<code>_config.yml</code>文件末尾，如下图所示<br><img src="/2019/09/07/hexo/build_hexo/hexo_dep.png" alt="设置hexo deploy config"><br><code>type</code> 填git<br><code>repository</code> 值填复制来的仓库地址<br><code>branch</code> 默认填master就行<br><img src="/2019/09/07/hexo/build_hexo/warn.png" width="20" height="20"> 这里一定要注意，hexo的配置文件中所有的value值和<code>:</code>之间必须要有空格，否则会报错</p><p>然后点击仓库界面的<code>Settings</code>进入仓库的设置界面，拉到最下面有<code>GitHub Pages</code><br>这里的<code>Your site is published at xxxxxxxxxx</code>就是可访问的线上博客地址。<br>把这里的url复制到刚刚打开的<code>_config.yml</code>的开头。如下图所示<br><img src="/2019/09/07/hexo/build_hexo/rep_setting.png" alt></p><p><img src="/2019/09/07/hexo/build_hexo/blog_url.png" alt></p><p><img src="/2019/09/07/hexo/build_hexo/blog_url_config.png" alt></p><p>这里配置好后可以准备把本地的博客push到GitHub了</p><h2 id="4-push本地博客到GitHub"><a href="#4-push本地博客到GitHub" class="headerlink" title="4.push本地博客到GitHub"></a>4.push本地博客到GitHub</h2><p>首先使用<code>npm i hexo-deployer-git</code>安装一个hexo的git扩展功能。<br><img src="/2019/09/07/hexo/build_hexo/npm_git.png" alt="npm install deployer"><br>如图表示安装成功。<br>然后依次执行下面三条命令</p><pre><code>hexo clean  //清除缓存hexo g  //重新生成博客文件hexo d  //push到GitHub</code></pre><p>执行<code>hexo d</code>的时候会要求输入GitHub账号和密码，输入完成后就push成功了。<br>接下来就可以打开我们的线上博客地址查看最新博客了。</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><ul><li><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></li><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/06/hello-world/"/>
      <url>/2019/09/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
